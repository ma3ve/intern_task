{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["openNotification","title","content","notification","open","message","description","onClick","console","log","App","useState","notifications","setNotifications","showModal","setShowModal","loading","setLoading","useEffect","a","axios","method","url","res","data","createNotification","newNotification","justify","gutter","style","marginTop","xs","type","visible","onCancel","footer","name","onFinish","Item","rules","required","placeholder","TextArea","rows","htmlType","margin","md","sm","bordered","dataSource","renderItem","float","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAwJA,IAAMA,EAAmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC/BC,IAAaC,KAAK,CACdC,QAASJ,EACTK,YAAaJ,EAEbK,QAAS,WACLC,QAAQC,IAAI,6BAITC,EAnJf,WAAgB,IAAD,EAC+BC,mBAAS,IADxC,mBACJC,EADI,KACWC,EADX,OAEuBF,oBAAS,GAFhC,mBAEJG,EAFI,KAEOC,EAFP,OAGmBJ,oBAAS,GAH5B,mBAGJK,EAHI,KAGKC,EAHL,KAKXC,qBAAU,WACN,sBAAC,4BAAAC,EAAA,+EAEyBC,IAAM,CAAEC,OAAQ,MAAOC,IAAK,SAFrD,OAEaC,EAFb,OAGOf,QAAQC,IAAIc,EAAIC,MAChBX,EAAiBU,EAAIC,MAJ5B,gDAMOhB,QAAQC,IAAR,MANP,wDAAD,KASD,IAEH,IAAMgB,EAAkB,uCAAG,WAAOD,GAAP,iBAAAL,EAAA,sEAEnBF,GAAW,GAFQ,SAGDG,IAAM,CACpBC,OAAQ,OACRC,IAAK,cACLE,SANe,OAGbD,EAHa,OAQbG,EAAkBH,EAAIC,KAC5BX,EAAiB,CAACa,GAAF,mBAAsBd,KATnB,gDAWnBJ,QAAQC,IAAR,MAXmB,yBAanBQ,GAAW,GACXF,GAAa,GAdM,4EAAH,sDAkBxB,OACI,eAAC,IAAD,CACIY,QAAQ,SACRC,OAAQ,CAAC,EAAG,IACZC,MAAO,CAAEC,UAAW,QAHxB,UAKI,cAAC,IAAD,CAAKC,GAAI,GAAT,SACI,cAAC,IAAD,CAAKJ,QAAQ,SAAb,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIK,KAAK,UACLzB,QAAS,kBAAMQ,GAAa,IAFhC,wBAMA,cAAC,IAAD,CACId,MAAM,sBACNgC,QAASnB,EACToB,SAAU,kBAAMnB,GAAa,IAC7BoB,OAAQ,KAJZ,SAMI,eAAC,IAAD,CACIC,KAAK,qBACLC,SAAUZ,EAFd,UAKI,cAAC,IAAKa,KAAN,CACIF,KAAK,QACLG,MAAO,CACH,CACIC,UAAU,EACVnC,QACI,6BANhB,SAUI,cAAC,IAAD,CAAOoC,YAAY,YAGvB,cAAC,IAAKH,KAAN,CACIF,KAAK,UACLG,MAAO,CACH,CACIC,UAAU,EACVnC,QACI,8BANhB,SAUI,cAAC,IAAMqC,SAAP,CACIC,KAAM,EACNF,YAAY,cAIpB,eAAC,IAAKH,KAAN,WACI,cAAC,IAAD,CACIN,KAAK,UACLY,SAAS,SACTf,MAAO,CAAEgB,OAAQ,OACjB7B,QAASA,EAJb,oBAQA,cAAC,IAAD,CACI4B,SAAS,SACTrC,QAAS,WACLQ,GAAa,IAEjBc,MAAO,CAAEgB,OAAQ,OALrB,kCAexB,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIhB,GAAI,GAAzB,SACI,cAAC,IAAD,CACIiB,UAAQ,EACRC,WAAYrC,EACZsC,WAAY,SAAC/C,GAAD,OACR,eAAC,IAAKmC,KAAN,WACI,cAAC,IAAD,UAAanC,EAAaF,QAC1B,cAAC,IAAD,CACI4B,MAAO,CAAEsB,MAAO,SAChB5C,QAAS,WACLP,EAAiBG,IAHzB,gCC5HbiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.8e33ed1c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport {\n    Row,\n    Col,\n    List,\n    Typography,\n    Button,\n    notification,\n    Modal,\n    Form,\n    Input,\n} from \"antd\";\nimport axios from \"axios\";\n\nfunction App() {\n    const [notifications, setNotifications] = useState([]);\n    const [showModal, setShowModal] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                const res = await axios({ method: \"get\", url: \"/api\" });\n                console.log(res.data);\n                setNotifications(res.data);\n            } catch (error) {\n                console.log(error);\n            }\n        })();\n    }, []);\n\n    const createNotification = async (data) => {\n        try {\n            setLoading(true);\n            const res = await axios({\n                method: \"post\",\n                url: \"/api/create\",\n                data,\n            });\n            const newNotification = res.data;\n            setNotifications([newNotification, ...notifications]);\n        } catch (error) {\n            console.log(error);\n        } finally {\n            setLoading(false);\n            setShowModal(false);\n        }\n    };\n\n    return (\n        <Row\n            justify=\"center\"\n            gutter={[8, 16]}\n            style={{ marginTop: \"20px\" }}\n        >\n            <Col xs={24}>\n                <Row justify=\"center\">\n                    <Col>\n                        <Button\n                            type=\"primary\"\n                            onClick={() => setShowModal(true)}\n                        >\n                            create new\n                        </Button>\n                        <Modal\n                            title=\"Create Notification\"\n                            visible={showModal}\n                            onCancel={() => setShowModal(false)}\n                            footer={null}\n                        >\n                            <Form\n                                name=\"createNotification\"\n                                onFinish={createNotification}\n                                //   onFinishFailed={onFinishFailed}\n                            >\n                                <Form.Item\n                                    name=\"title\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message:\n                                                \"Please input your title!\",\n                                        },\n                                    ]}\n                                >\n                                    <Input placeholder=\"Title\" />\n                                </Form.Item>\n\n                                <Form.Item\n                                    name=\"content\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message:\n                                                \"Please input your content\",\n                                        },\n                                    ]}\n                                >\n                                    <Input.TextArea\n                                        rows={4}\n                                        placeholder=\"content\"\n                                    />\n                                </Form.Item>\n\n                                <Form.Item>\n                                    <Button\n                                        type=\"primary\"\n                                        htmlType=\"submit\"\n                                        style={{ margin: \"5px\" }}\n                                        loading={loading}\n                                    >\n                                        Submit\n                                    </Button>\n                                    <Button\n                                        htmlType=\"button\"\n                                        onClick={() => {\n                                            setShowModal(false);\n                                        }}\n                                        style={{ margin: \"5px\" }}\n                                    >\n                                        Canel\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Modal>\n                    </Col>\n                </Row>\n            </Col>\n            <Col md={12} sm={18} xs={23}>\n                <List\n                    bordered\n                    dataSource={notifications}\n                    renderItem={(notification) => (\n                        <List.Item>\n                            <Typography>{notification.title}</Typography>\n                            <Button\n                                style={{ float: \"right\" }}\n                                onClick={() => {\n                                    openNotification(notification);\n                                }}\n                            >\n                                Notify\n                            </Button>\n                        </List.Item>\n                    )}\n                />\n            </Col>\n        </Row>\n    );\n}\n\nconst openNotification = ({ title, content }) => {\n    notification.open({\n        message: title,\n        description: content,\n\n        onClick: () => {\n            console.log(\"Notification Clicked!\");\n        },\n    });\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}