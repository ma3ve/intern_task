{"version":3,"sources":["ShowModal.js","App.js","reportWebVitals.js","index.js"],"names":["ShowUpdateModal","fields","updateModal","setUpdateModal","id","getNewNotification","useState","loading","setLoading","updateNotification","data","a","axios","method","url","res","console","log","visible","onCancel","footer","name","onFinish","Item","rules","required","message","placeholder","TextArea","rows","type","htmlType","style","margin","onClick","App","notifications","setNotifications","showModal","setShowModal","title","description","updatedData","setUpdatedData","useEffect","createNotification","newNotification","justify","gutter","marginTop","xs","md","sm","bordered","dataSource","renderItem","notification","index","float","value","content","forEach","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfac2d24.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Input, Modal, Button } from \"antd\";\nimport axios from \"axios\";\n\nconst ShowUpdateModal = ({\n  fields,\n  updateModal,\n  setUpdateModal,\n  id,\n  getNewNotification,\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  const updateNotification = async (data) => {\n    try {\n      setLoading(true);\n      const res = await axios({\n        method: \"patch\",\n        url: `/api/${id}`,\n        data,\n      });\n      getNewNotification(res.data);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n      setUpdateModal(false);\n    }\n  };\n\n  return (\n    <Modal\n      visible={updateModal}\n      onCancel={() => setUpdateModal(false)}\n      footer={null}\n    >\n      <Form\n        name=\"createNotification\"\n        onFinish={updateNotification}\n        fields={fields}\n        //   onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          name=\"title\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your title!\",\n            },\n          ]}\n        >\n          <Input placeholder=\"Title\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"content\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your content\",\n            },\n          ]}\n        >\n          <Input.TextArea rows={4} placeholder=\"content\" />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{ margin: \"5px\" }}\n            loading={loading}\n          >\n            update\n          </Button>\n          <Button\n            htmlType=\"button\"\n            onClick={() => {\n              setUpdateModal(false);\n            }}\n            style={{ margin: \"5px\" }}\n          >\n            Canel\n          </Button>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ShowUpdateModal;\n","import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport ShowUpdateModal from \"./ShowModal\";\nimport {\n  Row,\n  Col,\n  List,\n  Typography,\n  Button,\n  notification,\n  Modal,\n  Form,\n  Input,\n} from \"antd\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [notifications, setNotifications] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [updatedData, setUpdatedData] = useState({\n    title: \"\",\n    description: \"\",\n  });\n  const [updateModal, setUpdateModal] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const res = await axios({ method: \"get\", url: \"/api\" });\n        console.log(res.data);\n        setNotifications(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  }, []);\n\n  const createNotification = async (data) => {\n    try {\n      setLoading(true);\n      const res = await axios({\n        method: \"post\",\n        url: \"/api/create\",\n        data,\n      });\n      const newNotification = res.data;\n      setNotifications([newNotification, ...notifications]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  const getNewNotification = (data) => {\n    notifications.forEach((notification, index) => {\n      if (notification.id == data.id) {\n        notifications[index] = data;\n        console.log(data);\n        return;\n      }\n    });\n  };\n\n  return (\n    <Row justify=\"center\" gutter={[8, 16]} style={{ marginTop: \"20px\" }}>\n      <Col xs={24}>\n        <Row justify=\"center\">\n          <Col>\n            <Button type=\"primary\" onClick={() => setShowModal(true)}>\n              create\n            </Button>\n            <Modal\n              title=\"Create Notification\"\n              visible={showModal}\n              onCancel={() => setShowModal(false)}\n              footer={null}\n            >\n              <Form\n                name=\"createNotification\"\n                onFinish={createNotification}\n                //   onFinishFailed={onFinishFailed}\n              >\n                <Form.Item\n                  name=\"title\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your title!\",\n                    },\n                  ]}\n                >\n                  <Input placeholder=\"Title\" />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"content\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your content\",\n                    },\n                  ]}\n                >\n                  <Input.TextArea rows={4} placeholder=\"content\" />\n                </Form.Item>\n\n                <Form.Item>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{ margin: \"5px\" }}\n                    loading={loading}\n                  >\n                    Submit\n                  </Button>\n                  <Button\n                    htmlType=\"button\"\n                    onClick={() => {\n                      setShowModal(false);\n                    }}\n                    style={{ margin: \"5px\" }}\n                  >\n                    Canel\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Modal>\n          </Col>\n        </Row>\n      </Col>\n      <Col md={12} sm={18} xs={23}>\n        <List\n          bordered\n          dataSource={notifications}\n          renderItem={(notification, index) => (\n            <List.Item>\n              <Typography>{notification.title}</Typography>\n              <Button\n                style={{ float: \"right\" }}\n                onClick={() => {\n                  //   openNotification(notification);\n                  setUpdateModal(true);\n                  setUpdatedData(notification);\n                }}\n              >\n                view\n              </Button>\n            </List.Item>\n          )}\n        />\n        <ShowUpdateModal\n          fields={[\n            {\n              name: [\"title\"],\n              value: updatedData.title,\n            },\n            {\n              name: [\"content\"],\n              value: updatedData.content,\n            },\n          ]}\n          updateModal={updateModal}\n          setUpdateModal={setUpdateModal}\n          id={updatedData.id}\n          getNewNotification={getNewNotification}\n        />\n      </Col>\n    </Row>\n  );\n}\n\n// const openNotification = ({ title, content }) => {\n//   notification.open({\n//     message: title,\n//     description: content,\n\n//     onClick: () => {\n//       console.log(\"Notification Clicked!\");\n//     },\n//   });\n// };\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}